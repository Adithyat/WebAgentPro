// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAgentPro.Data;

namespace WebAgentProTemplate.Migrations
{
    [DbContext(typeof(WapDbContext))]
    [Migration("20190731165944_AddDriverVehicleAndUserModels")]
    partial class AddDriverVehicleAndUserModels
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WebAgentProTemplate.Api.Models.Discount", b =>
                {
                    b.Property<string>("StateCode")
                        .HasMaxLength(2);

                    b.Property<decimal>("AnnualMileage");

                    b.Property<decimal>("AntiLockBrakes");

                    b.Property<decimal>("AntiTheftInstalled");

                    b.Property<decimal>("ClaimInLastFiveYears");

                    b.Property<decimal>("CustomerLessThanThreeYearsDriving");

                    b.Property<decimal>("DayTimeRunningLights");

                    b.Property<decimal>("DaysDrivenPerWeek");

                    b.Property<decimal>("DriverLessThanTwentyThree");

                    b.Property<decimal>("GarageAddressDifferentFromResidence");

                    b.Property<decimal>("MilesDrivenToWork");

                    b.Property<decimal>("MovingViolationInLastFiveYears");

                    b.Property<decimal>("MultiCarDiscount");

                    b.Property<decimal>("PassiveRestraints");

                    b.Property<decimal>("PreviousCarrierLizardIns");

                    b.Property<decimal>("PreviousCarrierPervasiveStateIns");

                    b.Property<decimal>("ReduceUseDiscount");

                    b.Property<decimal>("SafeDrivingSchoolAttended");

                    b.HasKey("StateCode");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("WebAgentProTemplate.Api.Models.Driver", b =>
                {
                    b.Property<long>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("D_DateOfBirth");

                    b.Property<string>("D_FirstName")
                        .HasMaxLength(50);

                    b.Property<string>("D_LastName")
                        .HasMaxLength(50);

                    b.Property<string>("D_SSN")
                        .HasMaxLength(11);

                    b.Property<string>("DriverLicenseNumber")
                        .HasMaxLength(50);

                    b.Property<string>("DriverLicenseStateCode")
                        .HasMaxLength(2);

                    b.Property<decimal>("DriverSubmittedCost");

                    b.Property<long>("QuoteId");

                    b.Property<bool>("SafeDrivingSchoolAttended");

                    b.Property<decimal>("SafeDrivingSchoolAttendedValue");

                    b.HasKey("DriverId");

                    b.HasIndex("QuoteId");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("WebAgentProTemplate.Api.Models.Quote", b =>
                {
                    b.Property<long>("QuoteId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(50);

                    b.Property<string>("City")
                        .HasMaxLength(50);

                    b.Property<bool?>("ClaimInLastFiveYears");

                    b.Property<decimal?>("ClaimInLastFiveYearsValue");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool?>("CreatedOnMobile");

                    b.Property<decimal?>("DriverSubmittedSubTotal");

                    b.Property<bool?>("ForceMultiCarDiscount");

                    b.Property<decimal?>("ForceMultiCarDiscoutValue");

                    b.Property<bool?>("LessThanThreeYearsDriving");

                    b.Property<decimal?>("LessThanThreeYearsDrivingValue");

                    b.Property<bool?>("MovingViolationInLastFiveYears");

                    b.Property<decimal?>("MovingViolationInLastFiveYearsValue");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(15);

                    b.Property<int?>("PreviousCarrier");

                    b.Property<decimal?>("PreviousCarrierValue");

                    b.Property<DateTime?>("Q_DateOfBirth");

                    b.Property<string>("Q_Email")
                        .HasMaxLength(50);

                    b.Property<string>("Q_FirstName")
                        .HasMaxLength(50);

                    b.Property<string>("Q_LastName")
                        .HasMaxLength(50);

                    b.Property<string>("Q_SSN")
                        .HasMaxLength(11);

                    b.Property<string>("Q_StateCode")
                        .HasMaxLength(2);

                    b.Property<int?>("QuoteStatus");

                    b.Property<DateTime?>("SubmittedAt");

                    b.Property<bool?>("SubmittedOnMobile");

                    b.Property<decimal?>("TotalSubmittedCost");

                    b.Property<string>("UserId");

                    b.Property<decimal?>("VehicleSubmittedSubTotal");

                    b.HasKey("QuoteId");

                    b.HasIndex("UserId");

                    b.ToTable("Quotes");
                });

            modelBuilder.Entity("WebAgentProTemplate.Api.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<int>("Role");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<DateTime>("U_DateOfBirth");

                    b.Property<string>("U_Email")
                        .HasMaxLength(50);

                    b.Property<string>("U_FirstName");

                    b.Property<string>("U_LastName");

                    b.Property<string>("U_StateCode")
                        .HasMaxLength(2);

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<int>("UserStatus");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("WebAgentProTemplate.Api.Models.Vehicle", b =>
                {
                    b.Property<long>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnnualMileage");

                    b.Property<decimal>("AnnualMileageDiscountValue");

                    b.Property<bool>("AntiLockBrakes");

                    b.Property<decimal>("AntiLockBrakesValue");

                    b.Property<bool>("AntiTheft");

                    b.Property<decimal>("AntiTheftValue");

                    b.Property<int>("CurrentValue");

                    b.Property<bool>("DayTimeRunningLights");

                    b.Property<int>("DaysDrivenPerWeek");

                    b.Property<decimal>("DaysDrivenPerWeekDiscountValue");

                    b.Property<decimal>("DaytTimeRunningLightsValue");

                    b.Property<long?>("DriverId");

                    b.Property<bool>("GarageDifferentAddressThanResidence");

                    b.Property<decimal>("GarageDifferentAddressThanResidenceValue");

                    b.Property<string>("Make")
                        .HasMaxLength(50);

                    b.Property<decimal>("MileDrivenToWorkDiscountValue");

                    b.Property<int>("MilesDrivenToWork");

                    b.Property<string>("Model")
                        .HasMaxLength(50);

                    b.Property<bool>("PassiveRestraints");

                    b.Property<decimal>("PassiveRestraintsValue");

                    b.Property<long>("QuoteId");

                    b.Property<bool>("ReducedUsedDiscount");

                    b.Property<decimal>("ReducedUsedDiscountValue");

                    b.Property<decimal>("VehicleSubmittedCost");

                    b.Property<string>("Vin")
                        .HasMaxLength(17);

                    b.Property<string>("Year")
                        .HasMaxLength(4);

                    b.HasKey("VehicleId");

                    b.HasIndex("DriverId");

                    b.HasIndex("QuoteId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("WebAgentProTemplate.Api.Models.Widget", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<DateTime>("LastDesignReview");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Widgets");
                });

            modelBuilder.Entity("WebAgentProTemplate.Api.Models.WidgetPart", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<long>("WidgetID");

                    b.HasKey("ID");

                    b.HasIndex("WidgetID");

                    b.ToTable("WidgetParts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebAgentProTemplate.Api.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebAgentProTemplate.Api.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebAgentProTemplate.Api.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebAgentProTemplate.Api.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebAgentProTemplate.Api.Models.Driver", b =>
                {
                    b.HasOne("WebAgentProTemplate.Api.Models.Quote", "Quote")
                        .WithMany()
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebAgentProTemplate.Api.Models.Quote", b =>
                {
                    b.HasOne("WebAgentProTemplate.Api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("WebAgentProTemplate.Api.Models.Vehicle", b =>
                {
                    b.HasOne("WebAgentProTemplate.Api.Models.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId");

                    b.HasOne("WebAgentProTemplate.Api.Models.Quote", "Quote")
                        .WithMany()
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebAgentProTemplate.Api.Models.WidgetPart", b =>
                {
                    b.HasOne("WebAgentProTemplate.Api.Models.Widget", "Widget")
                        .WithMany("Parts")
                        .HasForeignKey("WidgetID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
